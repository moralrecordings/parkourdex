from django.conf.urls import include, url
from rest_framework import routers, viewsets
from rest_framework.urlpatterns import format_suffix_patterns
from rest_framework_nested import routers as nested

from parkourdex.views import LoginView, LogoutView
from locations.api_v1 import FeatureViewSet, FeatureCategoryViewSet, LocationViewSet, LocationStatusView


# borrowed from https://stackoverflow.com/questions/18818179/routing-api-views-in-django-rest-framework#18823752
class Router( routers.DefaultRouter ):
    """
    Extends functionality of DefaultRouter adding possibility
    to register simple API views, not just Viewsets.
    """

    def get_routes( self, viewset ):
        """
        Checks if the viewset is an instance of ViewSet,
        otherwise assumes it's a simple view and does not run
        original `get_routes` code.
        """
        if issubclass( viewset, viewsets.ViewSetMixin ):
            return super().get_routes( viewset )

        return []

    def get_urls(self):
        """
        Append non-viewset views to the urls
        generated by the original `get_urls` method.
        """
        # URLs for simple views
        ret = []
        for prefix, viewset, basename in self.registry:

            # Skip viewsets
            if issubclass( viewset, viewsets.ViewSetMixin ):
                continue

            # URL regex
            regex = '{prefix}{trailing_slash}$'.format(
                prefix=prefix,
                trailing_slash=self.trailing_slash
            )

            # The view name has to have suffix "-list" due to specifics
            # of the DefaultRouter implementation.
            ret.append( url(
                regex, viewset.as_view(),
                name='{0}-list'.format(basename)
            ) )

        # Format suffixes
        ret = format_suffix_patterns( ret, allowed=['json', 'html'] )

        # Prepend URLs for viewsets and return
        return super().get_urls() + ret


# stupid shim to add APIView support for DRF routers
class APIViewRouter( routers.DefaultRouter ):
    routes = [
        routers.Route(
            url=r'^{prefix}{trailing_slash}$',
            mapping={
                'get': 'list',
                'put': 'update',
                'patch': 'partial_update',
            },
            name='{basename}-list',
            detail=False,
            initkwargs={},
        ),
    ]

    def get_routes( self, viewset ):
        return self.routes

    def get_urls( self ):
        ret = []

        for prefix, viewset, basename in self.registry:
            lookup = self.get_lookup_regex(viewset)
            routes = self.get_routes(viewset)
            print(viewset)
            for route in routes:

                # Only actions which actually exist on the viewset will be bound
                mapping = self.get_method_map(viewset, route.mapping)
                if not mapping:
                    continue

                # Build the url pattern
                regex = route.url.format(
                    prefix=prefix,
                    lookup=lookup,
                    trailing_slash=self.trailing_slash
                )

                # If there is no prefix, the first part of the url is probably
                #   controlled by project's urls.py and the router is in an app,
                #   so a slash in the beginning will (A) cause Django to give
                #   warnings and (B) generate URLS that will require using '//'.
                if not prefix and regex[:2] == '^/':
                    regex = '^' + regex[2:]

                initkwargs = route.initkwargs.copy()
                # exclude mapping if not a Viewset (aka APIView)
                if issubclass( viewset, viewsets.ViewSetMixin ):
                    view = viewset.as_view(mapping, **initkwargs)
                else:
                    view = viewset.as_view(**initkwargs)
                name = route.name.format(basename=basename)
                ret.append(url(regex, view, name=name))

        return ret


class NestedRouter( nested.NestedMixin, Router ):
    pass

class NestedAPIViewRouter( nested.NestedMixin, APIViewRouter ):
    pass

api_v1_router = Router()
api_v1_router.register( 'login', LoginView, basename='login' )
api_v1_router.register( 'logout', LogoutView, basename='logout' )
api_v1_router.register( 'feature', FeatureViewSet )
api_v1_router.register( 'feature_category', FeatureCategoryViewSet )
api_v1_router.register( 'location', LocationViewSet )

location_router = NestedAPIViewRouter( api_v1_router, 'location', lookup='location' )
location_router.register( 'status', LocationStatusView, basename='location_status' )

api_v1_urls = [
    url( '^', include( api_v1_router.urls ) ),
    url( '^', include( location_router.urls ) ),
]
